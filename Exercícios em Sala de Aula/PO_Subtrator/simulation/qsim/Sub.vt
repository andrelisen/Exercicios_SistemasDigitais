// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/12/2017 16:20:00"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    PO_Sub
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module PO_Sub_vlg_sample_tst(
	a_PO,
	b_PO,
	clk,
	Ctrl_mux1,
	Ctrl_mux2,
	En_inputs,
	En_regAdder,
	sampler_tx
);
input [15:0] a_PO;
input [15:0] b_PO;
input  clk;
input  Ctrl_mux1;
input  Ctrl_mux2;
input  En_inputs;
input  En_regAdder;
output sampler_tx;

reg sample;
time current_time;
always @(a_PO or b_PO or clk or Ctrl_mux1 or Ctrl_mux2 or En_inputs or En_regAdder)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module PO_Sub_vlg_check_tst (
	c_PO,
	outAdder_view,
	outInv_view,
	outMux1_view,
	outMux2_view,
	outRegA_view,
	outRegAdder_view,
	outRegB_view,
	sampler_rx
);
input [15:0] c_PO;
input [15:0] outAdder_view;
input [15:0] outInv_view;
input [15:0] outMux1_view;
input [15:0] outMux2_view;
input [15:0] outRegA_view;
input [15:0] outRegAdder_view;
input [15:0] outRegB_view;
input sampler_rx;

reg [15:0] c_PO_expected;
reg [15:0] outAdder_view_expected;
reg [15:0] outInv_view_expected;
reg [15:0] outMux1_view_expected;
reg [15:0] outMux2_view_expected;
reg [15:0] outRegA_view_expected;
reg [15:0] outRegAdder_view_expected;
reg [15:0] outRegB_view_expected;

reg [15:0] c_PO_prev;
reg [15:0] outAdder_view_prev;
reg [15:0] outInv_view_prev;
reg [15:0] outMux1_view_prev;
reg [15:0] outMux2_view_prev;
reg [15:0] outRegA_view_prev;
reg [15:0] outRegAdder_view_prev;
reg [15:0] outRegB_view_prev;

reg [15:0] c_PO_expected_prev;
reg [15:0] outAdder_view_expected_prev;
reg [15:0] outInv_view_expected_prev;
reg [15:0] outMux1_view_expected_prev;
reg [15:0] outMux2_view_expected_prev;
reg [15:0] outRegA_view_expected_prev;
reg [15:0] outRegAdder_view_expected_prev;
reg [15:0] outRegB_view_expected_prev;

reg [15:0] last_c_PO_exp;
reg [15:0] last_outAdder_view_exp;
reg [15:0] last_outInv_view_exp;
reg [15:0] last_outMux1_view_exp;
reg [15:0] last_outMux2_view_exp;
reg [15:0] last_outRegA_view_exp;
reg [15:0] last_outRegAdder_view_exp;
reg [15:0] last_outRegB_view_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	c_PO_prev = c_PO;
	outAdder_view_prev = outAdder_view;
	outInv_view_prev = outInv_view;
	outMux1_view_prev = outMux1_view;
	outMux2_view_prev = outMux2_view;
	outRegA_view_prev = outRegA_view;
	outRegAdder_view_prev = outRegAdder_view;
	outRegB_view_prev = outRegB_view;
end

// update expected /o prevs

always @(trigger)
begin
	c_PO_expected_prev = c_PO_expected;
	outAdder_view_expected_prev = outAdder_view_expected;
	outInv_view_expected_prev = outInv_view_expected;
	outMux1_view_expected_prev = outMux1_view_expected;
	outMux2_view_expected_prev = outMux2_view_expected;
	outRegA_view_expected_prev = outRegA_view_expected;
	outRegAdder_view_expected_prev = outRegAdder_view_expected;
	outRegB_view_expected_prev = outRegB_view_expected;
end


// expected outRegA_view[ 15 ]
initial
begin
	outRegA_view_expected[15] = 1'bX;
end 
// expected outRegA_view[ 14 ]
initial
begin
	outRegA_view_expected[14] = 1'bX;
end 
// expected outRegA_view[ 13 ]
initial
begin
	outRegA_view_expected[13] = 1'bX;
end 
// expected outRegA_view[ 12 ]
initial
begin
	outRegA_view_expected[12] = 1'bX;
end 
// expected outRegA_view[ 11 ]
initial
begin
	outRegA_view_expected[11] = 1'bX;
end 
// expected outRegA_view[ 10 ]
initial
begin
	outRegA_view_expected[10] = 1'bX;
end 
// expected outRegA_view[ 9 ]
initial
begin
	outRegA_view_expected[9] = 1'bX;
end 
// expected outRegA_view[ 8 ]
initial
begin
	outRegA_view_expected[8] = 1'bX;
end 
// expected outRegA_view[ 7 ]
initial
begin
	outRegA_view_expected[7] = 1'bX;
end 
// expected outRegA_view[ 6 ]
initial
begin
	outRegA_view_expected[6] = 1'bX;
end 
// expected outRegA_view[ 5 ]
initial
begin
	outRegA_view_expected[5] = 1'bX;
end 
// expected outRegA_view[ 4 ]
initial
begin
	outRegA_view_expected[4] = 1'bX;
end 
// expected outRegA_view[ 3 ]
initial
begin
	outRegA_view_expected[3] = 1'bX;
end 
// expected outRegA_view[ 2 ]
initial
begin
	outRegA_view_expected[2] = 1'bX;
end 
// expected outRegA_view[ 1 ]
initial
begin
	outRegA_view_expected[1] = 1'bX;
end 
// expected outRegA_view[ 0 ]
initial
begin
	outRegA_view_expected[0] = 1'bX;
end 
// expected outRegB_view[ 15 ]
initial
begin
	outRegB_view_expected[15] = 1'bX;
end 
// expected outRegB_view[ 14 ]
initial
begin
	outRegB_view_expected[14] = 1'bX;
end 
// expected outRegB_view[ 13 ]
initial
begin
	outRegB_view_expected[13] = 1'bX;
end 
// expected outRegB_view[ 12 ]
initial
begin
	outRegB_view_expected[12] = 1'bX;
end 
// expected outRegB_view[ 11 ]
initial
begin
	outRegB_view_expected[11] = 1'bX;
end 
// expected outRegB_view[ 10 ]
initial
begin
	outRegB_view_expected[10] = 1'bX;
end 
// expected outRegB_view[ 9 ]
initial
begin
	outRegB_view_expected[9] = 1'bX;
end 
// expected outRegB_view[ 8 ]
initial
begin
	outRegB_view_expected[8] = 1'bX;
end 
// expected outRegB_view[ 7 ]
initial
begin
	outRegB_view_expected[7] = 1'bX;
end 
// expected outRegB_view[ 6 ]
initial
begin
	outRegB_view_expected[6] = 1'bX;
end 
// expected outRegB_view[ 5 ]
initial
begin
	outRegB_view_expected[5] = 1'bX;
end 
// expected outRegB_view[ 4 ]
initial
begin
	outRegB_view_expected[4] = 1'bX;
end 
// expected outRegB_view[ 3 ]
initial
begin
	outRegB_view_expected[3] = 1'bX;
end 
// expected outRegB_view[ 2 ]
initial
begin
	outRegB_view_expected[2] = 1'bX;
end 
// expected outRegB_view[ 1 ]
initial
begin
	outRegB_view_expected[1] = 1'bX;
end 
// expected outRegB_view[ 0 ]
initial
begin
	outRegB_view_expected[0] = 1'bX;
end 
// expected outInv_view[ 15 ]
initial
begin
	outInv_view_expected[15] = 1'bX;
end 
// expected outInv_view[ 14 ]
initial
begin
	outInv_view_expected[14] = 1'bX;
end 
// expected outInv_view[ 13 ]
initial
begin
	outInv_view_expected[13] = 1'bX;
end 
// expected outInv_view[ 12 ]
initial
begin
	outInv_view_expected[12] = 1'bX;
end 
// expected outInv_view[ 11 ]
initial
begin
	outInv_view_expected[11] = 1'bX;
end 
// expected outInv_view[ 10 ]
initial
begin
	outInv_view_expected[10] = 1'bX;
end 
// expected outInv_view[ 9 ]
initial
begin
	outInv_view_expected[9] = 1'bX;
end 
// expected outInv_view[ 8 ]
initial
begin
	outInv_view_expected[8] = 1'bX;
end 
// expected outInv_view[ 7 ]
initial
begin
	outInv_view_expected[7] = 1'bX;
end 
// expected outInv_view[ 6 ]
initial
begin
	outInv_view_expected[6] = 1'bX;
end 
// expected outInv_view[ 5 ]
initial
begin
	outInv_view_expected[5] = 1'bX;
end 
// expected outInv_view[ 4 ]
initial
begin
	outInv_view_expected[4] = 1'bX;
end 
// expected outInv_view[ 3 ]
initial
begin
	outInv_view_expected[3] = 1'bX;
end 
// expected outInv_view[ 2 ]
initial
begin
	outInv_view_expected[2] = 1'bX;
end 
// expected outInv_view[ 1 ]
initial
begin
	outInv_view_expected[1] = 1'bX;
end 
// expected outInv_view[ 0 ]
initial
begin
	outInv_view_expected[0] = 1'bX;
end 
// expected outMux1_view[ 15 ]
initial
begin
	outMux1_view_expected[15] = 1'bX;
end 
// expected outMux1_view[ 14 ]
initial
begin
	outMux1_view_expected[14] = 1'bX;
end 
// expected outMux1_view[ 13 ]
initial
begin
	outMux1_view_expected[13] = 1'bX;
end 
// expected outMux1_view[ 12 ]
initial
begin
	outMux1_view_expected[12] = 1'bX;
end 
// expected outMux1_view[ 11 ]
initial
begin
	outMux1_view_expected[11] = 1'bX;
end 
// expected outMux1_view[ 10 ]
initial
begin
	outMux1_view_expected[10] = 1'bX;
end 
// expected outMux1_view[ 9 ]
initial
begin
	outMux1_view_expected[9] = 1'bX;
end 
// expected outMux1_view[ 8 ]
initial
begin
	outMux1_view_expected[8] = 1'bX;
end 
// expected outMux1_view[ 7 ]
initial
begin
	outMux1_view_expected[7] = 1'bX;
end 
// expected outMux1_view[ 6 ]
initial
begin
	outMux1_view_expected[6] = 1'bX;
end 
// expected outMux1_view[ 5 ]
initial
begin
	outMux1_view_expected[5] = 1'bX;
end 
// expected outMux1_view[ 4 ]
initial
begin
	outMux1_view_expected[4] = 1'bX;
end 
// expected outMux1_view[ 3 ]
initial
begin
	outMux1_view_expected[3] = 1'bX;
end 
// expected outMux1_view[ 2 ]
initial
begin
	outMux1_view_expected[2] = 1'bX;
end 
// expected outMux1_view[ 1 ]
initial
begin
	outMux1_view_expected[1] = 1'bX;
end 
// expected outMux1_view[ 0 ]
initial
begin
	outMux1_view_expected[0] = 1'bX;
end 
// expected outMux2_view[ 15 ]
initial
begin
	outMux2_view_expected[15] = 1'bX;
end 
// expected outMux2_view[ 14 ]
initial
begin
	outMux2_view_expected[14] = 1'bX;
end 
// expected outMux2_view[ 13 ]
initial
begin
	outMux2_view_expected[13] = 1'bX;
end 
// expected outMux2_view[ 12 ]
initial
begin
	outMux2_view_expected[12] = 1'bX;
end 
// expected outMux2_view[ 11 ]
initial
begin
	outMux2_view_expected[11] = 1'bX;
end 
// expected outMux2_view[ 10 ]
initial
begin
	outMux2_view_expected[10] = 1'bX;
end 
// expected outMux2_view[ 9 ]
initial
begin
	outMux2_view_expected[9] = 1'bX;
end 
// expected outMux2_view[ 8 ]
initial
begin
	outMux2_view_expected[8] = 1'bX;
end 
// expected outMux2_view[ 7 ]
initial
begin
	outMux2_view_expected[7] = 1'bX;
end 
// expected outMux2_view[ 6 ]
initial
begin
	outMux2_view_expected[6] = 1'bX;
end 
// expected outMux2_view[ 5 ]
initial
begin
	outMux2_view_expected[5] = 1'bX;
end 
// expected outMux2_view[ 4 ]
initial
begin
	outMux2_view_expected[4] = 1'bX;
end 
// expected outMux2_view[ 3 ]
initial
begin
	outMux2_view_expected[3] = 1'bX;
end 
// expected outMux2_view[ 2 ]
initial
begin
	outMux2_view_expected[2] = 1'bX;
end 
// expected outMux2_view[ 1 ]
initial
begin
	outMux2_view_expected[1] = 1'bX;
end 
// expected outMux2_view[ 0 ]
initial
begin
	outMux2_view_expected[0] = 1'bX;
end 
// expected outAdder_view[ 15 ]
initial
begin
	outAdder_view_expected[15] = 1'bX;
end 
// expected outAdder_view[ 14 ]
initial
begin
	outAdder_view_expected[14] = 1'bX;
end 
// expected outAdder_view[ 13 ]
initial
begin
	outAdder_view_expected[13] = 1'bX;
end 
// expected outAdder_view[ 12 ]
initial
begin
	outAdder_view_expected[12] = 1'bX;
end 
// expected outAdder_view[ 11 ]
initial
begin
	outAdder_view_expected[11] = 1'bX;
end 
// expected outAdder_view[ 10 ]
initial
begin
	outAdder_view_expected[10] = 1'bX;
end 
// expected outAdder_view[ 9 ]
initial
begin
	outAdder_view_expected[9] = 1'bX;
end 
// expected outAdder_view[ 8 ]
initial
begin
	outAdder_view_expected[8] = 1'bX;
end 
// expected outAdder_view[ 7 ]
initial
begin
	outAdder_view_expected[7] = 1'bX;
end 
// expected outAdder_view[ 6 ]
initial
begin
	outAdder_view_expected[6] = 1'bX;
end 
// expected outAdder_view[ 5 ]
initial
begin
	outAdder_view_expected[5] = 1'bX;
end 
// expected outAdder_view[ 4 ]
initial
begin
	outAdder_view_expected[4] = 1'bX;
end 
// expected outAdder_view[ 3 ]
initial
begin
	outAdder_view_expected[3] = 1'bX;
end 
// expected outAdder_view[ 2 ]
initial
begin
	outAdder_view_expected[2] = 1'bX;
end 
// expected outAdder_view[ 1 ]
initial
begin
	outAdder_view_expected[1] = 1'bX;
end 
// expected outAdder_view[ 0 ]
initial
begin
	outAdder_view_expected[0] = 1'bX;
end 
// expected outRegAdder_view[ 15 ]
initial
begin
	outRegAdder_view_expected[15] = 1'bX;
end 
// expected outRegAdder_view[ 14 ]
initial
begin
	outRegAdder_view_expected[14] = 1'bX;
end 
// expected outRegAdder_view[ 13 ]
initial
begin
	outRegAdder_view_expected[13] = 1'bX;
end 
// expected outRegAdder_view[ 12 ]
initial
begin
	outRegAdder_view_expected[12] = 1'bX;
end 
// expected outRegAdder_view[ 11 ]
initial
begin
	outRegAdder_view_expected[11] = 1'bX;
end 
// expected outRegAdder_view[ 10 ]
initial
begin
	outRegAdder_view_expected[10] = 1'bX;
end 
// expected outRegAdder_view[ 9 ]
initial
begin
	outRegAdder_view_expected[9] = 1'bX;
end 
// expected outRegAdder_view[ 8 ]
initial
begin
	outRegAdder_view_expected[8] = 1'bX;
end 
// expected outRegAdder_view[ 7 ]
initial
begin
	outRegAdder_view_expected[7] = 1'bX;
end 
// expected outRegAdder_view[ 6 ]
initial
begin
	outRegAdder_view_expected[6] = 1'bX;
end 
// expected outRegAdder_view[ 5 ]
initial
begin
	outRegAdder_view_expected[5] = 1'bX;
end 
// expected outRegAdder_view[ 4 ]
initial
begin
	outRegAdder_view_expected[4] = 1'bX;
end 
// expected outRegAdder_view[ 3 ]
initial
begin
	outRegAdder_view_expected[3] = 1'bX;
end 
// expected outRegAdder_view[ 2 ]
initial
begin
	outRegAdder_view_expected[2] = 1'bX;
end 
// expected outRegAdder_view[ 1 ]
initial
begin
	outRegAdder_view_expected[1] = 1'bX;
end 
// expected outRegAdder_view[ 0 ]
initial
begin
	outRegAdder_view_expected[0] = 1'bX;
end 
// expected c_PO[ 15 ]
initial
begin
	c_PO_expected[15] = 1'bX;
end 
// expected c_PO[ 14 ]
initial
begin
	c_PO_expected[14] = 1'bX;
end 
// expected c_PO[ 13 ]
initial
begin
	c_PO_expected[13] = 1'bX;
end 
// expected c_PO[ 12 ]
initial
begin
	c_PO_expected[12] = 1'bX;
end 
// expected c_PO[ 11 ]
initial
begin
	c_PO_expected[11] = 1'bX;
end 
// expected c_PO[ 10 ]
initial
begin
	c_PO_expected[10] = 1'bX;
end 
// expected c_PO[ 9 ]
initial
begin
	c_PO_expected[9] = 1'bX;
end 
// expected c_PO[ 8 ]
initial
begin
	c_PO_expected[8] = 1'bX;
end 
// expected c_PO[ 7 ]
initial
begin
	c_PO_expected[7] = 1'bX;
end 
// expected c_PO[ 6 ]
initial
begin
	c_PO_expected[6] = 1'bX;
end 
// expected c_PO[ 5 ]
initial
begin
	c_PO_expected[5] = 1'bX;
end 
// expected c_PO[ 4 ]
initial
begin
	c_PO_expected[4] = 1'bX;
end 
// expected c_PO[ 3 ]
initial
begin
	c_PO_expected[3] = 1'bX;
end 
// expected c_PO[ 2 ]
initial
begin
	c_PO_expected[2] = 1'bX;
end 
// expected c_PO[ 1 ]
initial
begin
	c_PO_expected[1] = 1'bX;
end 
// expected c_PO[ 0 ]
initial
begin
	c_PO_expected[0] = 1'bX;
end 
// generate trigger
always @(c_PO_expected or c_PO or outAdder_view_expected or outAdder_view or outInv_view_expected or outInv_view or outMux1_view_expected or outMux1_view or outMux2_view_expected or outMux2_view or outRegA_view_expected or outRegA_view or outRegAdder_view_expected or outRegAdder_view or outRegB_view_expected or outRegB_view)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected c_PO = %b | expected outAdder_view = %b | expected outInv_view = %b | expected outMux1_view = %b | expected outMux2_view = %b | expected outRegA_view = %b | expected outRegAdder_view = %b | expected outRegB_view = %b | ",c_PO_expected_prev,outAdder_view_expected_prev,outInv_view_expected_prev,outMux1_view_expected_prev,outMux2_view_expected_prev,outRegA_view_expected_prev,outRegAdder_view_expected_prev,outRegB_view_expected_prev);
	$display("| real c_PO = %b | real outAdder_view = %b | real outInv_view = %b | real outMux1_view = %b | real outMux2_view = %b | real outRegA_view = %b | real outRegAdder_view = %b | real outRegB_view = %b | ",c_PO_prev,outAdder_view_prev,outInv_view_prev,outMux1_view_prev,outMux2_view_prev,outRegA_view_prev,outRegAdder_view_prev,outRegB_view_prev);
`endif
	if (
		( c_PO_expected_prev[0] !== 1'bx ) && ( c_PO_prev[0] !== c_PO_expected_prev[0] )
		&& ((c_PO_expected_prev[0] !== last_c_PO_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_PO[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_PO_expected_prev);
		$display ("     Real value = %b", c_PO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_PO_exp[0] = c_PO_expected_prev[0];
	end
	if (
		( c_PO_expected_prev[1] !== 1'bx ) && ( c_PO_prev[1] !== c_PO_expected_prev[1] )
		&& ((c_PO_expected_prev[1] !== last_c_PO_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_PO[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_PO_expected_prev);
		$display ("     Real value = %b", c_PO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_PO_exp[1] = c_PO_expected_prev[1];
	end
	if (
		( c_PO_expected_prev[2] !== 1'bx ) && ( c_PO_prev[2] !== c_PO_expected_prev[2] )
		&& ((c_PO_expected_prev[2] !== last_c_PO_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_PO[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_PO_expected_prev);
		$display ("     Real value = %b", c_PO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_PO_exp[2] = c_PO_expected_prev[2];
	end
	if (
		( c_PO_expected_prev[3] !== 1'bx ) && ( c_PO_prev[3] !== c_PO_expected_prev[3] )
		&& ((c_PO_expected_prev[3] !== last_c_PO_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_PO[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_PO_expected_prev);
		$display ("     Real value = %b", c_PO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_PO_exp[3] = c_PO_expected_prev[3];
	end
	if (
		( c_PO_expected_prev[4] !== 1'bx ) && ( c_PO_prev[4] !== c_PO_expected_prev[4] )
		&& ((c_PO_expected_prev[4] !== last_c_PO_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_PO[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_PO_expected_prev);
		$display ("     Real value = %b", c_PO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_PO_exp[4] = c_PO_expected_prev[4];
	end
	if (
		( c_PO_expected_prev[5] !== 1'bx ) && ( c_PO_prev[5] !== c_PO_expected_prev[5] )
		&& ((c_PO_expected_prev[5] !== last_c_PO_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_PO[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_PO_expected_prev);
		$display ("     Real value = %b", c_PO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_PO_exp[5] = c_PO_expected_prev[5];
	end
	if (
		( c_PO_expected_prev[6] !== 1'bx ) && ( c_PO_prev[6] !== c_PO_expected_prev[6] )
		&& ((c_PO_expected_prev[6] !== last_c_PO_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_PO[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_PO_expected_prev);
		$display ("     Real value = %b", c_PO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_PO_exp[6] = c_PO_expected_prev[6];
	end
	if (
		( c_PO_expected_prev[7] !== 1'bx ) && ( c_PO_prev[7] !== c_PO_expected_prev[7] )
		&& ((c_PO_expected_prev[7] !== last_c_PO_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_PO[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_PO_expected_prev);
		$display ("     Real value = %b", c_PO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_PO_exp[7] = c_PO_expected_prev[7];
	end
	if (
		( c_PO_expected_prev[8] !== 1'bx ) && ( c_PO_prev[8] !== c_PO_expected_prev[8] )
		&& ((c_PO_expected_prev[8] !== last_c_PO_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_PO[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_PO_expected_prev);
		$display ("     Real value = %b", c_PO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_PO_exp[8] = c_PO_expected_prev[8];
	end
	if (
		( c_PO_expected_prev[9] !== 1'bx ) && ( c_PO_prev[9] !== c_PO_expected_prev[9] )
		&& ((c_PO_expected_prev[9] !== last_c_PO_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_PO[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_PO_expected_prev);
		$display ("     Real value = %b", c_PO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_PO_exp[9] = c_PO_expected_prev[9];
	end
	if (
		( c_PO_expected_prev[10] !== 1'bx ) && ( c_PO_prev[10] !== c_PO_expected_prev[10] )
		&& ((c_PO_expected_prev[10] !== last_c_PO_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_PO[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_PO_expected_prev);
		$display ("     Real value = %b", c_PO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_PO_exp[10] = c_PO_expected_prev[10];
	end
	if (
		( c_PO_expected_prev[11] !== 1'bx ) && ( c_PO_prev[11] !== c_PO_expected_prev[11] )
		&& ((c_PO_expected_prev[11] !== last_c_PO_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_PO[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_PO_expected_prev);
		$display ("     Real value = %b", c_PO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_PO_exp[11] = c_PO_expected_prev[11];
	end
	if (
		( c_PO_expected_prev[12] !== 1'bx ) && ( c_PO_prev[12] !== c_PO_expected_prev[12] )
		&& ((c_PO_expected_prev[12] !== last_c_PO_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_PO[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_PO_expected_prev);
		$display ("     Real value = %b", c_PO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_PO_exp[12] = c_PO_expected_prev[12];
	end
	if (
		( c_PO_expected_prev[13] !== 1'bx ) && ( c_PO_prev[13] !== c_PO_expected_prev[13] )
		&& ((c_PO_expected_prev[13] !== last_c_PO_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_PO[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_PO_expected_prev);
		$display ("     Real value = %b", c_PO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_PO_exp[13] = c_PO_expected_prev[13];
	end
	if (
		( c_PO_expected_prev[14] !== 1'bx ) && ( c_PO_prev[14] !== c_PO_expected_prev[14] )
		&& ((c_PO_expected_prev[14] !== last_c_PO_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_PO[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_PO_expected_prev);
		$display ("     Real value = %b", c_PO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_PO_exp[14] = c_PO_expected_prev[14];
	end
	if (
		( c_PO_expected_prev[15] !== 1'bx ) && ( c_PO_prev[15] !== c_PO_expected_prev[15] )
		&& ((c_PO_expected_prev[15] !== last_c_PO_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c_PO[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_PO_expected_prev);
		$display ("     Real value = %b", c_PO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_c_PO_exp[15] = c_PO_expected_prev[15];
	end
	if (
		( outAdder_view_expected_prev[0] !== 1'bx ) && ( outAdder_view_prev[0] !== outAdder_view_expected_prev[0] )
		&& ((outAdder_view_expected_prev[0] !== last_outAdder_view_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAdder_view[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAdder_view_expected_prev);
		$display ("     Real value = %b", outAdder_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outAdder_view_exp[0] = outAdder_view_expected_prev[0];
	end
	if (
		( outAdder_view_expected_prev[1] !== 1'bx ) && ( outAdder_view_prev[1] !== outAdder_view_expected_prev[1] )
		&& ((outAdder_view_expected_prev[1] !== last_outAdder_view_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAdder_view[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAdder_view_expected_prev);
		$display ("     Real value = %b", outAdder_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outAdder_view_exp[1] = outAdder_view_expected_prev[1];
	end
	if (
		( outAdder_view_expected_prev[2] !== 1'bx ) && ( outAdder_view_prev[2] !== outAdder_view_expected_prev[2] )
		&& ((outAdder_view_expected_prev[2] !== last_outAdder_view_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAdder_view[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAdder_view_expected_prev);
		$display ("     Real value = %b", outAdder_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outAdder_view_exp[2] = outAdder_view_expected_prev[2];
	end
	if (
		( outAdder_view_expected_prev[3] !== 1'bx ) && ( outAdder_view_prev[3] !== outAdder_view_expected_prev[3] )
		&& ((outAdder_view_expected_prev[3] !== last_outAdder_view_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAdder_view[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAdder_view_expected_prev);
		$display ("     Real value = %b", outAdder_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outAdder_view_exp[3] = outAdder_view_expected_prev[3];
	end
	if (
		( outAdder_view_expected_prev[4] !== 1'bx ) && ( outAdder_view_prev[4] !== outAdder_view_expected_prev[4] )
		&& ((outAdder_view_expected_prev[4] !== last_outAdder_view_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAdder_view[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAdder_view_expected_prev);
		$display ("     Real value = %b", outAdder_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outAdder_view_exp[4] = outAdder_view_expected_prev[4];
	end
	if (
		( outAdder_view_expected_prev[5] !== 1'bx ) && ( outAdder_view_prev[5] !== outAdder_view_expected_prev[5] )
		&& ((outAdder_view_expected_prev[5] !== last_outAdder_view_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAdder_view[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAdder_view_expected_prev);
		$display ("     Real value = %b", outAdder_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outAdder_view_exp[5] = outAdder_view_expected_prev[5];
	end
	if (
		( outAdder_view_expected_prev[6] !== 1'bx ) && ( outAdder_view_prev[6] !== outAdder_view_expected_prev[6] )
		&& ((outAdder_view_expected_prev[6] !== last_outAdder_view_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAdder_view[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAdder_view_expected_prev);
		$display ("     Real value = %b", outAdder_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outAdder_view_exp[6] = outAdder_view_expected_prev[6];
	end
	if (
		( outAdder_view_expected_prev[7] !== 1'bx ) && ( outAdder_view_prev[7] !== outAdder_view_expected_prev[7] )
		&& ((outAdder_view_expected_prev[7] !== last_outAdder_view_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAdder_view[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAdder_view_expected_prev);
		$display ("     Real value = %b", outAdder_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outAdder_view_exp[7] = outAdder_view_expected_prev[7];
	end
	if (
		( outAdder_view_expected_prev[8] !== 1'bx ) && ( outAdder_view_prev[8] !== outAdder_view_expected_prev[8] )
		&& ((outAdder_view_expected_prev[8] !== last_outAdder_view_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAdder_view[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAdder_view_expected_prev);
		$display ("     Real value = %b", outAdder_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outAdder_view_exp[8] = outAdder_view_expected_prev[8];
	end
	if (
		( outAdder_view_expected_prev[9] !== 1'bx ) && ( outAdder_view_prev[9] !== outAdder_view_expected_prev[9] )
		&& ((outAdder_view_expected_prev[9] !== last_outAdder_view_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAdder_view[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAdder_view_expected_prev);
		$display ("     Real value = %b", outAdder_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outAdder_view_exp[9] = outAdder_view_expected_prev[9];
	end
	if (
		( outAdder_view_expected_prev[10] !== 1'bx ) && ( outAdder_view_prev[10] !== outAdder_view_expected_prev[10] )
		&& ((outAdder_view_expected_prev[10] !== last_outAdder_view_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAdder_view[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAdder_view_expected_prev);
		$display ("     Real value = %b", outAdder_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outAdder_view_exp[10] = outAdder_view_expected_prev[10];
	end
	if (
		( outAdder_view_expected_prev[11] !== 1'bx ) && ( outAdder_view_prev[11] !== outAdder_view_expected_prev[11] )
		&& ((outAdder_view_expected_prev[11] !== last_outAdder_view_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAdder_view[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAdder_view_expected_prev);
		$display ("     Real value = %b", outAdder_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outAdder_view_exp[11] = outAdder_view_expected_prev[11];
	end
	if (
		( outAdder_view_expected_prev[12] !== 1'bx ) && ( outAdder_view_prev[12] !== outAdder_view_expected_prev[12] )
		&& ((outAdder_view_expected_prev[12] !== last_outAdder_view_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAdder_view[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAdder_view_expected_prev);
		$display ("     Real value = %b", outAdder_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outAdder_view_exp[12] = outAdder_view_expected_prev[12];
	end
	if (
		( outAdder_view_expected_prev[13] !== 1'bx ) && ( outAdder_view_prev[13] !== outAdder_view_expected_prev[13] )
		&& ((outAdder_view_expected_prev[13] !== last_outAdder_view_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAdder_view[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAdder_view_expected_prev);
		$display ("     Real value = %b", outAdder_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outAdder_view_exp[13] = outAdder_view_expected_prev[13];
	end
	if (
		( outAdder_view_expected_prev[14] !== 1'bx ) && ( outAdder_view_prev[14] !== outAdder_view_expected_prev[14] )
		&& ((outAdder_view_expected_prev[14] !== last_outAdder_view_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAdder_view[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAdder_view_expected_prev);
		$display ("     Real value = %b", outAdder_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outAdder_view_exp[14] = outAdder_view_expected_prev[14];
	end
	if (
		( outAdder_view_expected_prev[15] !== 1'bx ) && ( outAdder_view_prev[15] !== outAdder_view_expected_prev[15] )
		&& ((outAdder_view_expected_prev[15] !== last_outAdder_view_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAdder_view[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAdder_view_expected_prev);
		$display ("     Real value = %b", outAdder_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outAdder_view_exp[15] = outAdder_view_expected_prev[15];
	end
	if (
		( outInv_view_expected_prev[0] !== 1'bx ) && ( outInv_view_prev[0] !== outInv_view_expected_prev[0] )
		&& ((outInv_view_expected_prev[0] !== last_outInv_view_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outInv_view[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outInv_view_expected_prev);
		$display ("     Real value = %b", outInv_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outInv_view_exp[0] = outInv_view_expected_prev[0];
	end
	if (
		( outInv_view_expected_prev[1] !== 1'bx ) && ( outInv_view_prev[1] !== outInv_view_expected_prev[1] )
		&& ((outInv_view_expected_prev[1] !== last_outInv_view_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outInv_view[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outInv_view_expected_prev);
		$display ("     Real value = %b", outInv_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outInv_view_exp[1] = outInv_view_expected_prev[1];
	end
	if (
		( outInv_view_expected_prev[2] !== 1'bx ) && ( outInv_view_prev[2] !== outInv_view_expected_prev[2] )
		&& ((outInv_view_expected_prev[2] !== last_outInv_view_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outInv_view[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outInv_view_expected_prev);
		$display ("     Real value = %b", outInv_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outInv_view_exp[2] = outInv_view_expected_prev[2];
	end
	if (
		( outInv_view_expected_prev[3] !== 1'bx ) && ( outInv_view_prev[3] !== outInv_view_expected_prev[3] )
		&& ((outInv_view_expected_prev[3] !== last_outInv_view_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outInv_view[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outInv_view_expected_prev);
		$display ("     Real value = %b", outInv_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outInv_view_exp[3] = outInv_view_expected_prev[3];
	end
	if (
		( outInv_view_expected_prev[4] !== 1'bx ) && ( outInv_view_prev[4] !== outInv_view_expected_prev[4] )
		&& ((outInv_view_expected_prev[4] !== last_outInv_view_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outInv_view[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outInv_view_expected_prev);
		$display ("     Real value = %b", outInv_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outInv_view_exp[4] = outInv_view_expected_prev[4];
	end
	if (
		( outInv_view_expected_prev[5] !== 1'bx ) && ( outInv_view_prev[5] !== outInv_view_expected_prev[5] )
		&& ((outInv_view_expected_prev[5] !== last_outInv_view_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outInv_view[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outInv_view_expected_prev);
		$display ("     Real value = %b", outInv_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outInv_view_exp[5] = outInv_view_expected_prev[5];
	end
	if (
		( outInv_view_expected_prev[6] !== 1'bx ) && ( outInv_view_prev[6] !== outInv_view_expected_prev[6] )
		&& ((outInv_view_expected_prev[6] !== last_outInv_view_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outInv_view[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outInv_view_expected_prev);
		$display ("     Real value = %b", outInv_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outInv_view_exp[6] = outInv_view_expected_prev[6];
	end
	if (
		( outInv_view_expected_prev[7] !== 1'bx ) && ( outInv_view_prev[7] !== outInv_view_expected_prev[7] )
		&& ((outInv_view_expected_prev[7] !== last_outInv_view_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outInv_view[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outInv_view_expected_prev);
		$display ("     Real value = %b", outInv_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outInv_view_exp[7] = outInv_view_expected_prev[7];
	end
	if (
		( outInv_view_expected_prev[8] !== 1'bx ) && ( outInv_view_prev[8] !== outInv_view_expected_prev[8] )
		&& ((outInv_view_expected_prev[8] !== last_outInv_view_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outInv_view[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outInv_view_expected_prev);
		$display ("     Real value = %b", outInv_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outInv_view_exp[8] = outInv_view_expected_prev[8];
	end
	if (
		( outInv_view_expected_prev[9] !== 1'bx ) && ( outInv_view_prev[9] !== outInv_view_expected_prev[9] )
		&& ((outInv_view_expected_prev[9] !== last_outInv_view_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outInv_view[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outInv_view_expected_prev);
		$display ("     Real value = %b", outInv_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outInv_view_exp[9] = outInv_view_expected_prev[9];
	end
	if (
		( outInv_view_expected_prev[10] !== 1'bx ) && ( outInv_view_prev[10] !== outInv_view_expected_prev[10] )
		&& ((outInv_view_expected_prev[10] !== last_outInv_view_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outInv_view[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outInv_view_expected_prev);
		$display ("     Real value = %b", outInv_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outInv_view_exp[10] = outInv_view_expected_prev[10];
	end
	if (
		( outInv_view_expected_prev[11] !== 1'bx ) && ( outInv_view_prev[11] !== outInv_view_expected_prev[11] )
		&& ((outInv_view_expected_prev[11] !== last_outInv_view_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outInv_view[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outInv_view_expected_prev);
		$display ("     Real value = %b", outInv_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outInv_view_exp[11] = outInv_view_expected_prev[11];
	end
	if (
		( outInv_view_expected_prev[12] !== 1'bx ) && ( outInv_view_prev[12] !== outInv_view_expected_prev[12] )
		&& ((outInv_view_expected_prev[12] !== last_outInv_view_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outInv_view[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outInv_view_expected_prev);
		$display ("     Real value = %b", outInv_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outInv_view_exp[12] = outInv_view_expected_prev[12];
	end
	if (
		( outInv_view_expected_prev[13] !== 1'bx ) && ( outInv_view_prev[13] !== outInv_view_expected_prev[13] )
		&& ((outInv_view_expected_prev[13] !== last_outInv_view_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outInv_view[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outInv_view_expected_prev);
		$display ("     Real value = %b", outInv_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outInv_view_exp[13] = outInv_view_expected_prev[13];
	end
	if (
		( outInv_view_expected_prev[14] !== 1'bx ) && ( outInv_view_prev[14] !== outInv_view_expected_prev[14] )
		&& ((outInv_view_expected_prev[14] !== last_outInv_view_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outInv_view[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outInv_view_expected_prev);
		$display ("     Real value = %b", outInv_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outInv_view_exp[14] = outInv_view_expected_prev[14];
	end
	if (
		( outInv_view_expected_prev[15] !== 1'bx ) && ( outInv_view_prev[15] !== outInv_view_expected_prev[15] )
		&& ((outInv_view_expected_prev[15] !== last_outInv_view_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outInv_view[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outInv_view_expected_prev);
		$display ("     Real value = %b", outInv_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outInv_view_exp[15] = outInv_view_expected_prev[15];
	end
	if (
		( outMux1_view_expected_prev[0] !== 1'bx ) && ( outMux1_view_prev[0] !== outMux1_view_expected_prev[0] )
		&& ((outMux1_view_expected_prev[0] !== last_outMux1_view_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outMux1_view[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outMux1_view_expected_prev);
		$display ("     Real value = %b", outMux1_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outMux1_view_exp[0] = outMux1_view_expected_prev[0];
	end
	if (
		( outMux1_view_expected_prev[1] !== 1'bx ) && ( outMux1_view_prev[1] !== outMux1_view_expected_prev[1] )
		&& ((outMux1_view_expected_prev[1] !== last_outMux1_view_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outMux1_view[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outMux1_view_expected_prev);
		$display ("     Real value = %b", outMux1_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outMux1_view_exp[1] = outMux1_view_expected_prev[1];
	end
	if (
		( outMux1_view_expected_prev[2] !== 1'bx ) && ( outMux1_view_prev[2] !== outMux1_view_expected_prev[2] )
		&& ((outMux1_view_expected_prev[2] !== last_outMux1_view_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outMux1_view[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outMux1_view_expected_prev);
		$display ("     Real value = %b", outMux1_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outMux1_view_exp[2] = outMux1_view_expected_prev[2];
	end
	if (
		( outMux1_view_expected_prev[3] !== 1'bx ) && ( outMux1_view_prev[3] !== outMux1_view_expected_prev[3] )
		&& ((outMux1_view_expected_prev[3] !== last_outMux1_view_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outMux1_view[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outMux1_view_expected_prev);
		$display ("     Real value = %b", outMux1_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outMux1_view_exp[3] = outMux1_view_expected_prev[3];
	end
	if (
		( outMux1_view_expected_prev[4] !== 1'bx ) && ( outMux1_view_prev[4] !== outMux1_view_expected_prev[4] )
		&& ((outMux1_view_expected_prev[4] !== last_outMux1_view_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outMux1_view[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outMux1_view_expected_prev);
		$display ("     Real value = %b", outMux1_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outMux1_view_exp[4] = outMux1_view_expected_prev[4];
	end
	if (
		( outMux1_view_expected_prev[5] !== 1'bx ) && ( outMux1_view_prev[5] !== outMux1_view_expected_prev[5] )
		&& ((outMux1_view_expected_prev[5] !== last_outMux1_view_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outMux1_view[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outMux1_view_expected_prev);
		$display ("     Real value = %b", outMux1_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outMux1_view_exp[5] = outMux1_view_expected_prev[5];
	end
	if (
		( outMux1_view_expected_prev[6] !== 1'bx ) && ( outMux1_view_prev[6] !== outMux1_view_expected_prev[6] )
		&& ((outMux1_view_expected_prev[6] !== last_outMux1_view_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outMux1_view[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outMux1_view_expected_prev);
		$display ("     Real value = %b", outMux1_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outMux1_view_exp[6] = outMux1_view_expected_prev[6];
	end
	if (
		( outMux1_view_expected_prev[7] !== 1'bx ) && ( outMux1_view_prev[7] !== outMux1_view_expected_prev[7] )
		&& ((outMux1_view_expected_prev[7] !== last_outMux1_view_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outMux1_view[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outMux1_view_expected_prev);
		$display ("     Real value = %b", outMux1_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outMux1_view_exp[7] = outMux1_view_expected_prev[7];
	end
	if (
		( outMux1_view_expected_prev[8] !== 1'bx ) && ( outMux1_view_prev[8] !== outMux1_view_expected_prev[8] )
		&& ((outMux1_view_expected_prev[8] !== last_outMux1_view_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outMux1_view[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outMux1_view_expected_prev);
		$display ("     Real value = %b", outMux1_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outMux1_view_exp[8] = outMux1_view_expected_prev[8];
	end
	if (
		( outMux1_view_expected_prev[9] !== 1'bx ) && ( outMux1_view_prev[9] !== outMux1_view_expected_prev[9] )
		&& ((outMux1_view_expected_prev[9] !== last_outMux1_view_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outMux1_view[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outMux1_view_expected_prev);
		$display ("     Real value = %b", outMux1_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outMux1_view_exp[9] = outMux1_view_expected_prev[9];
	end
	if (
		( outMux1_view_expected_prev[10] !== 1'bx ) && ( outMux1_view_prev[10] !== outMux1_view_expected_prev[10] )
		&& ((outMux1_view_expected_prev[10] !== last_outMux1_view_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outMux1_view[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outMux1_view_expected_prev);
		$display ("     Real value = %b", outMux1_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outMux1_view_exp[10] = outMux1_view_expected_prev[10];
	end
	if (
		( outMux1_view_expected_prev[11] !== 1'bx ) && ( outMux1_view_prev[11] !== outMux1_view_expected_prev[11] )
		&& ((outMux1_view_expected_prev[11] !== last_outMux1_view_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outMux1_view[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outMux1_view_expected_prev);
		$display ("     Real value = %b", outMux1_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outMux1_view_exp[11] = outMux1_view_expected_prev[11];
	end
	if (
		( outMux1_view_expected_prev[12] !== 1'bx ) && ( outMux1_view_prev[12] !== outMux1_view_expected_prev[12] )
		&& ((outMux1_view_expected_prev[12] !== last_outMux1_view_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outMux1_view[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outMux1_view_expected_prev);
		$display ("     Real value = %b", outMux1_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outMux1_view_exp[12] = outMux1_view_expected_prev[12];
	end
	if (
		( outMux1_view_expected_prev[13] !== 1'bx ) && ( outMux1_view_prev[13] !== outMux1_view_expected_prev[13] )
		&& ((outMux1_view_expected_prev[13] !== last_outMux1_view_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outMux1_view[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outMux1_view_expected_prev);
		$display ("     Real value = %b", outMux1_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outMux1_view_exp[13] = outMux1_view_expected_prev[13];
	end
	if (
		( outMux1_view_expected_prev[14] !== 1'bx ) && ( outMux1_view_prev[14] !== outMux1_view_expected_prev[14] )
		&& ((outMux1_view_expected_prev[14] !== last_outMux1_view_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outMux1_view[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outMux1_view_expected_prev);
		$display ("     Real value = %b", outMux1_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outMux1_view_exp[14] = outMux1_view_expected_prev[14];
	end
	if (
		( outMux1_view_expected_prev[15] !== 1'bx ) && ( outMux1_view_prev[15] !== outMux1_view_expected_prev[15] )
		&& ((outMux1_view_expected_prev[15] !== last_outMux1_view_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outMux1_view[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outMux1_view_expected_prev);
		$display ("     Real value = %b", outMux1_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outMux1_view_exp[15] = outMux1_view_expected_prev[15];
	end
	if (
		( outMux2_view_expected_prev[0] !== 1'bx ) && ( outMux2_view_prev[0] !== outMux2_view_expected_prev[0] )
		&& ((outMux2_view_expected_prev[0] !== last_outMux2_view_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outMux2_view[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outMux2_view_expected_prev);
		$display ("     Real value = %b", outMux2_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outMux2_view_exp[0] = outMux2_view_expected_prev[0];
	end
	if (
		( outMux2_view_expected_prev[1] !== 1'bx ) && ( outMux2_view_prev[1] !== outMux2_view_expected_prev[1] )
		&& ((outMux2_view_expected_prev[1] !== last_outMux2_view_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outMux2_view[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outMux2_view_expected_prev);
		$display ("     Real value = %b", outMux2_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outMux2_view_exp[1] = outMux2_view_expected_prev[1];
	end
	if (
		( outMux2_view_expected_prev[2] !== 1'bx ) && ( outMux2_view_prev[2] !== outMux2_view_expected_prev[2] )
		&& ((outMux2_view_expected_prev[2] !== last_outMux2_view_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outMux2_view[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outMux2_view_expected_prev);
		$display ("     Real value = %b", outMux2_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outMux2_view_exp[2] = outMux2_view_expected_prev[2];
	end
	if (
		( outMux2_view_expected_prev[3] !== 1'bx ) && ( outMux2_view_prev[3] !== outMux2_view_expected_prev[3] )
		&& ((outMux2_view_expected_prev[3] !== last_outMux2_view_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outMux2_view[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outMux2_view_expected_prev);
		$display ("     Real value = %b", outMux2_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outMux2_view_exp[3] = outMux2_view_expected_prev[3];
	end
	if (
		( outMux2_view_expected_prev[4] !== 1'bx ) && ( outMux2_view_prev[4] !== outMux2_view_expected_prev[4] )
		&& ((outMux2_view_expected_prev[4] !== last_outMux2_view_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outMux2_view[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outMux2_view_expected_prev);
		$display ("     Real value = %b", outMux2_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outMux2_view_exp[4] = outMux2_view_expected_prev[4];
	end
	if (
		( outMux2_view_expected_prev[5] !== 1'bx ) && ( outMux2_view_prev[5] !== outMux2_view_expected_prev[5] )
		&& ((outMux2_view_expected_prev[5] !== last_outMux2_view_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outMux2_view[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outMux2_view_expected_prev);
		$display ("     Real value = %b", outMux2_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outMux2_view_exp[5] = outMux2_view_expected_prev[5];
	end
	if (
		( outMux2_view_expected_prev[6] !== 1'bx ) && ( outMux2_view_prev[6] !== outMux2_view_expected_prev[6] )
		&& ((outMux2_view_expected_prev[6] !== last_outMux2_view_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outMux2_view[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outMux2_view_expected_prev);
		$display ("     Real value = %b", outMux2_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outMux2_view_exp[6] = outMux2_view_expected_prev[6];
	end
	if (
		( outMux2_view_expected_prev[7] !== 1'bx ) && ( outMux2_view_prev[7] !== outMux2_view_expected_prev[7] )
		&& ((outMux2_view_expected_prev[7] !== last_outMux2_view_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outMux2_view[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outMux2_view_expected_prev);
		$display ("     Real value = %b", outMux2_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outMux2_view_exp[7] = outMux2_view_expected_prev[7];
	end
	if (
		( outMux2_view_expected_prev[8] !== 1'bx ) && ( outMux2_view_prev[8] !== outMux2_view_expected_prev[8] )
		&& ((outMux2_view_expected_prev[8] !== last_outMux2_view_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outMux2_view[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outMux2_view_expected_prev);
		$display ("     Real value = %b", outMux2_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outMux2_view_exp[8] = outMux2_view_expected_prev[8];
	end
	if (
		( outMux2_view_expected_prev[9] !== 1'bx ) && ( outMux2_view_prev[9] !== outMux2_view_expected_prev[9] )
		&& ((outMux2_view_expected_prev[9] !== last_outMux2_view_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outMux2_view[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outMux2_view_expected_prev);
		$display ("     Real value = %b", outMux2_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outMux2_view_exp[9] = outMux2_view_expected_prev[9];
	end
	if (
		( outMux2_view_expected_prev[10] !== 1'bx ) && ( outMux2_view_prev[10] !== outMux2_view_expected_prev[10] )
		&& ((outMux2_view_expected_prev[10] !== last_outMux2_view_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outMux2_view[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outMux2_view_expected_prev);
		$display ("     Real value = %b", outMux2_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outMux2_view_exp[10] = outMux2_view_expected_prev[10];
	end
	if (
		( outMux2_view_expected_prev[11] !== 1'bx ) && ( outMux2_view_prev[11] !== outMux2_view_expected_prev[11] )
		&& ((outMux2_view_expected_prev[11] !== last_outMux2_view_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outMux2_view[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outMux2_view_expected_prev);
		$display ("     Real value = %b", outMux2_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outMux2_view_exp[11] = outMux2_view_expected_prev[11];
	end
	if (
		( outMux2_view_expected_prev[12] !== 1'bx ) && ( outMux2_view_prev[12] !== outMux2_view_expected_prev[12] )
		&& ((outMux2_view_expected_prev[12] !== last_outMux2_view_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outMux2_view[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outMux2_view_expected_prev);
		$display ("     Real value = %b", outMux2_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outMux2_view_exp[12] = outMux2_view_expected_prev[12];
	end
	if (
		( outMux2_view_expected_prev[13] !== 1'bx ) && ( outMux2_view_prev[13] !== outMux2_view_expected_prev[13] )
		&& ((outMux2_view_expected_prev[13] !== last_outMux2_view_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outMux2_view[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outMux2_view_expected_prev);
		$display ("     Real value = %b", outMux2_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outMux2_view_exp[13] = outMux2_view_expected_prev[13];
	end
	if (
		( outMux2_view_expected_prev[14] !== 1'bx ) && ( outMux2_view_prev[14] !== outMux2_view_expected_prev[14] )
		&& ((outMux2_view_expected_prev[14] !== last_outMux2_view_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outMux2_view[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outMux2_view_expected_prev);
		$display ("     Real value = %b", outMux2_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outMux2_view_exp[14] = outMux2_view_expected_prev[14];
	end
	if (
		( outMux2_view_expected_prev[15] !== 1'bx ) && ( outMux2_view_prev[15] !== outMux2_view_expected_prev[15] )
		&& ((outMux2_view_expected_prev[15] !== last_outMux2_view_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outMux2_view[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outMux2_view_expected_prev);
		$display ("     Real value = %b", outMux2_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_outMux2_view_exp[15] = outMux2_view_expected_prev[15];
	end
	if (
		( outRegA_view_expected_prev[0] !== 1'bx ) && ( outRegA_view_prev[0] !== outRegA_view_expected_prev[0] )
		&& ((outRegA_view_expected_prev[0] !== last_outRegA_view_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegA_view[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegA_view_expected_prev);
		$display ("     Real value = %b", outRegA_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outRegA_view_exp[0] = outRegA_view_expected_prev[0];
	end
	if (
		( outRegA_view_expected_prev[1] !== 1'bx ) && ( outRegA_view_prev[1] !== outRegA_view_expected_prev[1] )
		&& ((outRegA_view_expected_prev[1] !== last_outRegA_view_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegA_view[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegA_view_expected_prev);
		$display ("     Real value = %b", outRegA_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outRegA_view_exp[1] = outRegA_view_expected_prev[1];
	end
	if (
		( outRegA_view_expected_prev[2] !== 1'bx ) && ( outRegA_view_prev[2] !== outRegA_view_expected_prev[2] )
		&& ((outRegA_view_expected_prev[2] !== last_outRegA_view_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegA_view[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegA_view_expected_prev);
		$display ("     Real value = %b", outRegA_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outRegA_view_exp[2] = outRegA_view_expected_prev[2];
	end
	if (
		( outRegA_view_expected_prev[3] !== 1'bx ) && ( outRegA_view_prev[3] !== outRegA_view_expected_prev[3] )
		&& ((outRegA_view_expected_prev[3] !== last_outRegA_view_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegA_view[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegA_view_expected_prev);
		$display ("     Real value = %b", outRegA_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outRegA_view_exp[3] = outRegA_view_expected_prev[3];
	end
	if (
		( outRegA_view_expected_prev[4] !== 1'bx ) && ( outRegA_view_prev[4] !== outRegA_view_expected_prev[4] )
		&& ((outRegA_view_expected_prev[4] !== last_outRegA_view_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegA_view[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegA_view_expected_prev);
		$display ("     Real value = %b", outRegA_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outRegA_view_exp[4] = outRegA_view_expected_prev[4];
	end
	if (
		( outRegA_view_expected_prev[5] !== 1'bx ) && ( outRegA_view_prev[5] !== outRegA_view_expected_prev[5] )
		&& ((outRegA_view_expected_prev[5] !== last_outRegA_view_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegA_view[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegA_view_expected_prev);
		$display ("     Real value = %b", outRegA_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outRegA_view_exp[5] = outRegA_view_expected_prev[5];
	end
	if (
		( outRegA_view_expected_prev[6] !== 1'bx ) && ( outRegA_view_prev[6] !== outRegA_view_expected_prev[6] )
		&& ((outRegA_view_expected_prev[6] !== last_outRegA_view_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegA_view[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegA_view_expected_prev);
		$display ("     Real value = %b", outRegA_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outRegA_view_exp[6] = outRegA_view_expected_prev[6];
	end
	if (
		( outRegA_view_expected_prev[7] !== 1'bx ) && ( outRegA_view_prev[7] !== outRegA_view_expected_prev[7] )
		&& ((outRegA_view_expected_prev[7] !== last_outRegA_view_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegA_view[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegA_view_expected_prev);
		$display ("     Real value = %b", outRegA_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outRegA_view_exp[7] = outRegA_view_expected_prev[7];
	end
	if (
		( outRegA_view_expected_prev[8] !== 1'bx ) && ( outRegA_view_prev[8] !== outRegA_view_expected_prev[8] )
		&& ((outRegA_view_expected_prev[8] !== last_outRegA_view_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegA_view[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegA_view_expected_prev);
		$display ("     Real value = %b", outRegA_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outRegA_view_exp[8] = outRegA_view_expected_prev[8];
	end
	if (
		( outRegA_view_expected_prev[9] !== 1'bx ) && ( outRegA_view_prev[9] !== outRegA_view_expected_prev[9] )
		&& ((outRegA_view_expected_prev[9] !== last_outRegA_view_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegA_view[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegA_view_expected_prev);
		$display ("     Real value = %b", outRegA_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outRegA_view_exp[9] = outRegA_view_expected_prev[9];
	end
	if (
		( outRegA_view_expected_prev[10] !== 1'bx ) && ( outRegA_view_prev[10] !== outRegA_view_expected_prev[10] )
		&& ((outRegA_view_expected_prev[10] !== last_outRegA_view_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegA_view[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegA_view_expected_prev);
		$display ("     Real value = %b", outRegA_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outRegA_view_exp[10] = outRegA_view_expected_prev[10];
	end
	if (
		( outRegA_view_expected_prev[11] !== 1'bx ) && ( outRegA_view_prev[11] !== outRegA_view_expected_prev[11] )
		&& ((outRegA_view_expected_prev[11] !== last_outRegA_view_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegA_view[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegA_view_expected_prev);
		$display ("     Real value = %b", outRegA_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outRegA_view_exp[11] = outRegA_view_expected_prev[11];
	end
	if (
		( outRegA_view_expected_prev[12] !== 1'bx ) && ( outRegA_view_prev[12] !== outRegA_view_expected_prev[12] )
		&& ((outRegA_view_expected_prev[12] !== last_outRegA_view_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegA_view[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegA_view_expected_prev);
		$display ("     Real value = %b", outRegA_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outRegA_view_exp[12] = outRegA_view_expected_prev[12];
	end
	if (
		( outRegA_view_expected_prev[13] !== 1'bx ) && ( outRegA_view_prev[13] !== outRegA_view_expected_prev[13] )
		&& ((outRegA_view_expected_prev[13] !== last_outRegA_view_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegA_view[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegA_view_expected_prev);
		$display ("     Real value = %b", outRegA_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outRegA_view_exp[13] = outRegA_view_expected_prev[13];
	end
	if (
		( outRegA_view_expected_prev[14] !== 1'bx ) && ( outRegA_view_prev[14] !== outRegA_view_expected_prev[14] )
		&& ((outRegA_view_expected_prev[14] !== last_outRegA_view_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegA_view[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegA_view_expected_prev);
		$display ("     Real value = %b", outRegA_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outRegA_view_exp[14] = outRegA_view_expected_prev[14];
	end
	if (
		( outRegA_view_expected_prev[15] !== 1'bx ) && ( outRegA_view_prev[15] !== outRegA_view_expected_prev[15] )
		&& ((outRegA_view_expected_prev[15] !== last_outRegA_view_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegA_view[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegA_view_expected_prev);
		$display ("     Real value = %b", outRegA_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_outRegA_view_exp[15] = outRegA_view_expected_prev[15];
	end
	if (
		( outRegAdder_view_expected_prev[0] !== 1'bx ) && ( outRegAdder_view_prev[0] !== outRegAdder_view_expected_prev[0] )
		&& ((outRegAdder_view_expected_prev[0] !== last_outRegAdder_view_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegAdder_view[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegAdder_view_expected_prev);
		$display ("     Real value = %b", outRegAdder_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_outRegAdder_view_exp[0] = outRegAdder_view_expected_prev[0];
	end
	if (
		( outRegAdder_view_expected_prev[1] !== 1'bx ) && ( outRegAdder_view_prev[1] !== outRegAdder_view_expected_prev[1] )
		&& ((outRegAdder_view_expected_prev[1] !== last_outRegAdder_view_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegAdder_view[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegAdder_view_expected_prev);
		$display ("     Real value = %b", outRegAdder_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_outRegAdder_view_exp[1] = outRegAdder_view_expected_prev[1];
	end
	if (
		( outRegAdder_view_expected_prev[2] !== 1'bx ) && ( outRegAdder_view_prev[2] !== outRegAdder_view_expected_prev[2] )
		&& ((outRegAdder_view_expected_prev[2] !== last_outRegAdder_view_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegAdder_view[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegAdder_view_expected_prev);
		$display ("     Real value = %b", outRegAdder_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_outRegAdder_view_exp[2] = outRegAdder_view_expected_prev[2];
	end
	if (
		( outRegAdder_view_expected_prev[3] !== 1'bx ) && ( outRegAdder_view_prev[3] !== outRegAdder_view_expected_prev[3] )
		&& ((outRegAdder_view_expected_prev[3] !== last_outRegAdder_view_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegAdder_view[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegAdder_view_expected_prev);
		$display ("     Real value = %b", outRegAdder_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_outRegAdder_view_exp[3] = outRegAdder_view_expected_prev[3];
	end
	if (
		( outRegAdder_view_expected_prev[4] !== 1'bx ) && ( outRegAdder_view_prev[4] !== outRegAdder_view_expected_prev[4] )
		&& ((outRegAdder_view_expected_prev[4] !== last_outRegAdder_view_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegAdder_view[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegAdder_view_expected_prev);
		$display ("     Real value = %b", outRegAdder_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_outRegAdder_view_exp[4] = outRegAdder_view_expected_prev[4];
	end
	if (
		( outRegAdder_view_expected_prev[5] !== 1'bx ) && ( outRegAdder_view_prev[5] !== outRegAdder_view_expected_prev[5] )
		&& ((outRegAdder_view_expected_prev[5] !== last_outRegAdder_view_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegAdder_view[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegAdder_view_expected_prev);
		$display ("     Real value = %b", outRegAdder_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_outRegAdder_view_exp[5] = outRegAdder_view_expected_prev[5];
	end
	if (
		( outRegAdder_view_expected_prev[6] !== 1'bx ) && ( outRegAdder_view_prev[6] !== outRegAdder_view_expected_prev[6] )
		&& ((outRegAdder_view_expected_prev[6] !== last_outRegAdder_view_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegAdder_view[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegAdder_view_expected_prev);
		$display ("     Real value = %b", outRegAdder_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_outRegAdder_view_exp[6] = outRegAdder_view_expected_prev[6];
	end
	if (
		( outRegAdder_view_expected_prev[7] !== 1'bx ) && ( outRegAdder_view_prev[7] !== outRegAdder_view_expected_prev[7] )
		&& ((outRegAdder_view_expected_prev[7] !== last_outRegAdder_view_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegAdder_view[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegAdder_view_expected_prev);
		$display ("     Real value = %b", outRegAdder_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_outRegAdder_view_exp[7] = outRegAdder_view_expected_prev[7];
	end
	if (
		( outRegAdder_view_expected_prev[8] !== 1'bx ) && ( outRegAdder_view_prev[8] !== outRegAdder_view_expected_prev[8] )
		&& ((outRegAdder_view_expected_prev[8] !== last_outRegAdder_view_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegAdder_view[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegAdder_view_expected_prev);
		$display ("     Real value = %b", outRegAdder_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_outRegAdder_view_exp[8] = outRegAdder_view_expected_prev[8];
	end
	if (
		( outRegAdder_view_expected_prev[9] !== 1'bx ) && ( outRegAdder_view_prev[9] !== outRegAdder_view_expected_prev[9] )
		&& ((outRegAdder_view_expected_prev[9] !== last_outRegAdder_view_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegAdder_view[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegAdder_view_expected_prev);
		$display ("     Real value = %b", outRegAdder_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_outRegAdder_view_exp[9] = outRegAdder_view_expected_prev[9];
	end
	if (
		( outRegAdder_view_expected_prev[10] !== 1'bx ) && ( outRegAdder_view_prev[10] !== outRegAdder_view_expected_prev[10] )
		&& ((outRegAdder_view_expected_prev[10] !== last_outRegAdder_view_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegAdder_view[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegAdder_view_expected_prev);
		$display ("     Real value = %b", outRegAdder_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_outRegAdder_view_exp[10] = outRegAdder_view_expected_prev[10];
	end
	if (
		( outRegAdder_view_expected_prev[11] !== 1'bx ) && ( outRegAdder_view_prev[11] !== outRegAdder_view_expected_prev[11] )
		&& ((outRegAdder_view_expected_prev[11] !== last_outRegAdder_view_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegAdder_view[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegAdder_view_expected_prev);
		$display ("     Real value = %b", outRegAdder_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_outRegAdder_view_exp[11] = outRegAdder_view_expected_prev[11];
	end
	if (
		( outRegAdder_view_expected_prev[12] !== 1'bx ) && ( outRegAdder_view_prev[12] !== outRegAdder_view_expected_prev[12] )
		&& ((outRegAdder_view_expected_prev[12] !== last_outRegAdder_view_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegAdder_view[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegAdder_view_expected_prev);
		$display ("     Real value = %b", outRegAdder_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_outRegAdder_view_exp[12] = outRegAdder_view_expected_prev[12];
	end
	if (
		( outRegAdder_view_expected_prev[13] !== 1'bx ) && ( outRegAdder_view_prev[13] !== outRegAdder_view_expected_prev[13] )
		&& ((outRegAdder_view_expected_prev[13] !== last_outRegAdder_view_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegAdder_view[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegAdder_view_expected_prev);
		$display ("     Real value = %b", outRegAdder_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_outRegAdder_view_exp[13] = outRegAdder_view_expected_prev[13];
	end
	if (
		( outRegAdder_view_expected_prev[14] !== 1'bx ) && ( outRegAdder_view_prev[14] !== outRegAdder_view_expected_prev[14] )
		&& ((outRegAdder_view_expected_prev[14] !== last_outRegAdder_view_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegAdder_view[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegAdder_view_expected_prev);
		$display ("     Real value = %b", outRegAdder_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_outRegAdder_view_exp[14] = outRegAdder_view_expected_prev[14];
	end
	if (
		( outRegAdder_view_expected_prev[15] !== 1'bx ) && ( outRegAdder_view_prev[15] !== outRegAdder_view_expected_prev[15] )
		&& ((outRegAdder_view_expected_prev[15] !== last_outRegAdder_view_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegAdder_view[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegAdder_view_expected_prev);
		$display ("     Real value = %b", outRegAdder_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_outRegAdder_view_exp[15] = outRegAdder_view_expected_prev[15];
	end
	if (
		( outRegB_view_expected_prev[0] !== 1'bx ) && ( outRegB_view_prev[0] !== outRegB_view_expected_prev[0] )
		&& ((outRegB_view_expected_prev[0] !== last_outRegB_view_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegB_view[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegB_view_expected_prev);
		$display ("     Real value = %b", outRegB_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_outRegB_view_exp[0] = outRegB_view_expected_prev[0];
	end
	if (
		( outRegB_view_expected_prev[1] !== 1'bx ) && ( outRegB_view_prev[1] !== outRegB_view_expected_prev[1] )
		&& ((outRegB_view_expected_prev[1] !== last_outRegB_view_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegB_view[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegB_view_expected_prev);
		$display ("     Real value = %b", outRegB_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_outRegB_view_exp[1] = outRegB_view_expected_prev[1];
	end
	if (
		( outRegB_view_expected_prev[2] !== 1'bx ) && ( outRegB_view_prev[2] !== outRegB_view_expected_prev[2] )
		&& ((outRegB_view_expected_prev[2] !== last_outRegB_view_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegB_view[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegB_view_expected_prev);
		$display ("     Real value = %b", outRegB_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_outRegB_view_exp[2] = outRegB_view_expected_prev[2];
	end
	if (
		( outRegB_view_expected_prev[3] !== 1'bx ) && ( outRegB_view_prev[3] !== outRegB_view_expected_prev[3] )
		&& ((outRegB_view_expected_prev[3] !== last_outRegB_view_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegB_view[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegB_view_expected_prev);
		$display ("     Real value = %b", outRegB_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_outRegB_view_exp[3] = outRegB_view_expected_prev[3];
	end
	if (
		( outRegB_view_expected_prev[4] !== 1'bx ) && ( outRegB_view_prev[4] !== outRegB_view_expected_prev[4] )
		&& ((outRegB_view_expected_prev[4] !== last_outRegB_view_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegB_view[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegB_view_expected_prev);
		$display ("     Real value = %b", outRegB_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_outRegB_view_exp[4] = outRegB_view_expected_prev[4];
	end
	if (
		( outRegB_view_expected_prev[5] !== 1'bx ) && ( outRegB_view_prev[5] !== outRegB_view_expected_prev[5] )
		&& ((outRegB_view_expected_prev[5] !== last_outRegB_view_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegB_view[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegB_view_expected_prev);
		$display ("     Real value = %b", outRegB_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_outRegB_view_exp[5] = outRegB_view_expected_prev[5];
	end
	if (
		( outRegB_view_expected_prev[6] !== 1'bx ) && ( outRegB_view_prev[6] !== outRegB_view_expected_prev[6] )
		&& ((outRegB_view_expected_prev[6] !== last_outRegB_view_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegB_view[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegB_view_expected_prev);
		$display ("     Real value = %b", outRegB_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_outRegB_view_exp[6] = outRegB_view_expected_prev[6];
	end
	if (
		( outRegB_view_expected_prev[7] !== 1'bx ) && ( outRegB_view_prev[7] !== outRegB_view_expected_prev[7] )
		&& ((outRegB_view_expected_prev[7] !== last_outRegB_view_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegB_view[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegB_view_expected_prev);
		$display ("     Real value = %b", outRegB_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_outRegB_view_exp[7] = outRegB_view_expected_prev[7];
	end
	if (
		( outRegB_view_expected_prev[8] !== 1'bx ) && ( outRegB_view_prev[8] !== outRegB_view_expected_prev[8] )
		&& ((outRegB_view_expected_prev[8] !== last_outRegB_view_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegB_view[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegB_view_expected_prev);
		$display ("     Real value = %b", outRegB_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_outRegB_view_exp[8] = outRegB_view_expected_prev[8];
	end
	if (
		( outRegB_view_expected_prev[9] !== 1'bx ) && ( outRegB_view_prev[9] !== outRegB_view_expected_prev[9] )
		&& ((outRegB_view_expected_prev[9] !== last_outRegB_view_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegB_view[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegB_view_expected_prev);
		$display ("     Real value = %b", outRegB_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_outRegB_view_exp[9] = outRegB_view_expected_prev[9];
	end
	if (
		( outRegB_view_expected_prev[10] !== 1'bx ) && ( outRegB_view_prev[10] !== outRegB_view_expected_prev[10] )
		&& ((outRegB_view_expected_prev[10] !== last_outRegB_view_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegB_view[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegB_view_expected_prev);
		$display ("     Real value = %b", outRegB_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_outRegB_view_exp[10] = outRegB_view_expected_prev[10];
	end
	if (
		( outRegB_view_expected_prev[11] !== 1'bx ) && ( outRegB_view_prev[11] !== outRegB_view_expected_prev[11] )
		&& ((outRegB_view_expected_prev[11] !== last_outRegB_view_exp[11]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegB_view[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegB_view_expected_prev);
		$display ("     Real value = %b", outRegB_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_outRegB_view_exp[11] = outRegB_view_expected_prev[11];
	end
	if (
		( outRegB_view_expected_prev[12] !== 1'bx ) && ( outRegB_view_prev[12] !== outRegB_view_expected_prev[12] )
		&& ((outRegB_view_expected_prev[12] !== last_outRegB_view_exp[12]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegB_view[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegB_view_expected_prev);
		$display ("     Real value = %b", outRegB_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_outRegB_view_exp[12] = outRegB_view_expected_prev[12];
	end
	if (
		( outRegB_view_expected_prev[13] !== 1'bx ) && ( outRegB_view_prev[13] !== outRegB_view_expected_prev[13] )
		&& ((outRegB_view_expected_prev[13] !== last_outRegB_view_exp[13]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegB_view[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegB_view_expected_prev);
		$display ("     Real value = %b", outRegB_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_outRegB_view_exp[13] = outRegB_view_expected_prev[13];
	end
	if (
		( outRegB_view_expected_prev[14] !== 1'bx ) && ( outRegB_view_prev[14] !== outRegB_view_expected_prev[14] )
		&& ((outRegB_view_expected_prev[14] !== last_outRegB_view_exp[14]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegB_view[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegB_view_expected_prev);
		$display ("     Real value = %b", outRegB_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_outRegB_view_exp[14] = outRegB_view_expected_prev[14];
	end
	if (
		( outRegB_view_expected_prev[15] !== 1'bx ) && ( outRegB_view_prev[15] !== outRegB_view_expected_prev[15] )
		&& ((outRegB_view_expected_prev[15] !== last_outRegB_view_exp[15]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outRegB_view[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outRegB_view_expected_prev);
		$display ("     Real value = %b", outRegB_view_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_outRegB_view_exp[15] = outRegB_view_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module PO_Sub_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] a_PO;
reg [15:0] b_PO;
reg clk;
reg Ctrl_mux1;
reg Ctrl_mux2;
reg En_inputs;
reg En_regAdder;
// wires                                               
wire [15:0] c_PO;
wire [15:0] outAdder_view;
wire [15:0] outInv_view;
wire [15:0] outMux1_view;
wire [15:0] outMux2_view;
wire [15:0] outRegA_view;
wire [15:0] outRegAdder_view;
wire [15:0] outRegB_view;

wire sampler;                             

// assign statements (if any)                          
PO_Sub i1 (
// port map - connection between master ports and signals/registers   
	.a_PO(a_PO),
	.b_PO(b_PO),
	.c_PO(c_PO),
	.clk(clk),
	.Ctrl_mux1(Ctrl_mux1),
	.Ctrl_mux2(Ctrl_mux2),
	.En_inputs(En_inputs),
	.En_regAdder(En_regAdder),
	.outAdder_view(outAdder_view),
	.outInv_view(outInv_view),
	.outMux1_view(outMux1_view),
	.outMux2_view(outMux2_view),
	.outRegA_view(outRegA_view),
	.outRegAdder_view(outRegAdder_view),
	.outRegB_view(outRegB_view)
);
// a_PO[ 15 ]
initial
begin
	a_PO[15] = 1'b0;
end 
// a_PO[ 14 ]
initial
begin
	a_PO[14] = 1'b0;
end 
// a_PO[ 13 ]
initial
begin
	a_PO[13] = 1'b0;
end 
// a_PO[ 12 ]
initial
begin
	a_PO[12] = 1'b0;
end 
// a_PO[ 11 ]
initial
begin
	a_PO[11] = 1'b0;
end 
// a_PO[ 10 ]
initial
begin
	a_PO[10] = 1'b0;
end 
// a_PO[ 9 ]
initial
begin
	a_PO[9] = 1'b0;
end 
// a_PO[ 8 ]
initial
begin
	a_PO[8] = 1'b0;
end 
// a_PO[ 7 ]
initial
begin
	a_PO[7] = 1'b0;
end 
// a_PO[ 6 ]
initial
begin
	a_PO[6] = 1'b0;
end 
// a_PO[ 5 ]
initial
begin
	a_PO[5] = 1'b0;
end 
// a_PO[ 4 ]
initial
begin
	a_PO[4] = 1'b0;
end 
// a_PO[ 3 ]
initial
begin
	a_PO[3] = 1'b1;
end 
// a_PO[ 2 ]
initial
begin
	a_PO[2] = 1'b0;
end 
// a_PO[ 1 ]
initial
begin
	a_PO[1] = 1'b0;
end 
// a_PO[ 0 ]
initial
begin
	a_PO[0] = 1'b0;
end 
// b_PO[ 15 ]
initial
begin
	b_PO[15] = 1'b0;
end 
// b_PO[ 14 ]
initial
begin
	b_PO[14] = 1'b0;
end 
// b_PO[ 13 ]
initial
begin
	b_PO[13] = 1'b0;
end 
// b_PO[ 12 ]
initial
begin
	b_PO[12] = 1'b0;
end 
// b_PO[ 11 ]
initial
begin
	b_PO[11] = 1'b0;
end 
// b_PO[ 10 ]
initial
begin
	b_PO[10] = 1'b0;
end 
// b_PO[ 9 ]
initial
begin
	b_PO[9] = 1'b0;
end 
// b_PO[ 8 ]
initial
begin
	b_PO[8] = 1'b0;
end 
// b_PO[ 7 ]
initial
begin
	b_PO[7] = 1'b0;
end 
// b_PO[ 6 ]
initial
begin
	b_PO[6] = 1'b0;
end 
// b_PO[ 5 ]
initial
begin
	b_PO[5] = 1'b0;
end 
// b_PO[ 4 ]
initial
begin
	b_PO[4] = 1'b0;
end 
// b_PO[ 3 ]
initial
begin
	b_PO[3] = 1'b0;
end 
// b_PO[ 2 ]
initial
begin
	b_PO[2] = 1'b0;
end 
// b_PO[ 1 ]
initial
begin
	b_PO[1] = 1'b1;
end 
// b_PO[ 0 ]
initial
begin
	b_PO[0] = 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #50000 1'b1;
	#50000;
end 

// Ctrl_mux1
initial
begin
	Ctrl_mux1 = 1'bX;
	Ctrl_mux1 = #170000 1'b1;
	Ctrl_mux1 = #100000 1'b0;
end 

// Ctrl_mux2
initial
begin
	Ctrl_mux2 = 1'bX;
	Ctrl_mux2 = #170000 1'b0;
	Ctrl_mux2 = #100000 1'b1;
	Ctrl_mux2 = #100000 1'b0;
end 

// En_inputs
initial
begin
	En_inputs = 1'b0;
	En_inputs = #70000 1'b1;
	En_inputs = #100000 1'b0;
end 

// En_regAdder
initial
begin
	En_regAdder = 1'bX;
	En_regAdder = #170000 1'b1;
	En_regAdder = #200000 1'b0;
end 

PO_Sub_vlg_sample_tst tb_sample (
	.a_PO(a_PO),
	.b_PO(b_PO),
	.clk(clk),
	.Ctrl_mux1(Ctrl_mux1),
	.Ctrl_mux2(Ctrl_mux2),
	.En_inputs(En_inputs),
	.En_regAdder(En_regAdder),
	.sampler_tx(sampler)
);

PO_Sub_vlg_check_tst tb_out(
	.c_PO(c_PO),
	.outAdder_view(outAdder_view),
	.outInv_view(outInv_view),
	.outMux1_view(outMux1_view),
	.outMux2_view(outMux2_view),
	.outRegA_view(outRegA_view),
	.outRegAdder_view(outRegAdder_view),
	.outRegB_view(outRegB_view),
	.sampler_rx(sampler)
);
endmodule

